# 📄 AskYourPDF – AI-Powered PDF RAG Platform  
[![GitHub Repo](https://img.shields.io/badge/GitHub-Repository-blue?logo=github)](https://github.com/VedankWakalkar/AskYourPdf)

A full-stack PDF-RAG (Retrieval Augmented Generation) platform built using **Gemini 1.5 Flash**, **Next.js**, **Qdrant**, and **Clerk**. Authenticated users can upload PDFs, which are semantically embedded and stored for intelligent retrieval.

---

## 🔧 Tech Stack

### 🧠 Backend
- **Node.js**, **Express.js** – API server
- **BullMQ + Redis** – Background job queue
- **LangChain.js** – PDF parsing & embedding pipeline
- **Gemini 1.5 Flash (Google AI)** – Embedding generation
- **Qdrant** – Vector database for semantic retrieval

### 🌐 Frontend
- **Next.js 14** – React-based frontend
- **Clerk.dev** – User authentication and session management
- **Tailwind CSS** – UI styling
- **Axios** – API communication

---

## 🚀 Features

- 🔐 **Secure authentication** with Clerk
- 📄 Upload and process PDFs via background jobs
- 🧠 Generate embeddings using Gemini 1.5 Flash
- 📦 Store semantic vectors in Qdrant
- ⏳ Background job management using BullMQ
- ✅ Clean, responsive UI with upload status feedback

---

## 🖼️ System Architecture

Client (Next.js + Clerk)
|
| Authenticated Upload Request
v
Express API Server (PDF Upload)
|
| → Push job to Redis Queue (BullMQ)
v
PDF Processor Worker (LangChain + Gemini)
|
| → Embeddings → Qdrant Vector Store
v
Semantic Search / Retrieval (coming soon)

yaml

---

## 🛠️ Setup Instructions

### 1. Clone the Repository

``` 
git clone https://github.com/VedankWakalkar/AskYourPdf.git
cd AskYourPdf
2. Backend Setup (/server)
 

cd server
npm install
Create a .env file with your Gemini API key:

env
GEMINI_API_KEY=your_gemini_api_key
Run Redis & Qdrant using Docker:

 
docker compose up -d
Start the API server and worker:

 
node server.js     # Express API server
node worker.js     # BullMQ worker
3. Frontend Setup (/client)
 
cd ../client
npm install
Set up Clerk at Clerk.dev and copy your keys. Create a .env.local:

env
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=your_clerk_publishable_key
CLERK_SECRET_KEY=your_clerk_secret_key
NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
Run the development server:

 
npm run dev
Visit http://localhost:8080 to use the app.

📁 Project Structure
 
AskYourPdf/
├── server/
│   ├── server.js          # Express API
│   ├── worker.js          # BullMQ + LangChain + Gemini
│   └── uploads/           # Uploaded PDFs
│
├── client/
│   ├── pages/             # Next.js pages
│   ├── components/        # React components
│   └── utils/             # Utility functions
│
├── docker-compose.yml     # Redis & Qdrant setup
└── README.md
📄 Sample Job Payload
json

{
  "filename": "somatosensory.pdf",
  "destination": "uploads/",
  "path": "uploads/1748692941700-275539632-somatosensory.pdf"
}
🔐 Auth Flow with Clerk
User registration, login, and session handled via Clerk

Protected routes ensure only authenticated uploads

Future support for user-specific upload tracking

✅ TODO / Improvements
 PDF chunking and metadata tagging

 Semantic search over uploaded content

 Admin dashboard for job tracking

 Deploy frontend (Vercel) and backend (Railway/Render)

👨‍💻 Author
Vedank Wakalkar
🔗 GitHub Profile


